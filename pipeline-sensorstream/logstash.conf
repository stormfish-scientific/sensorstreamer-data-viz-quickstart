# This input block will listen on port 10514 for logs to come in.
# host should be an IP on the Logstash server.
# codec => "json" indicates that we expect the lines we're receiving to be in JSON format
# type => "rsyslog" is an optional identifier to help identify messaging streams in the pipeline.

input {
  tcp {
    port => 57175
    codec => "json"
    type => "sensorstream"
    }
}

# This is an empty filter block.  You can later add other filters here to further process
# your log lines

filter {
  date {
    match => [ "timestamp", "UNIX_MS" ]
  }
}


filter {
  mutate {
    add_field => { "sensor_feed" => "main" }
  }
}

filter {
  fingerprint {
    method => "SHA1"
    concatenate_sources => true
    source => [ "host", "port" ]
    target => "session_fingerprint"
  }
}

filter {
  mutate {
    remove_field => [
      "[gyroscope][x]",
      "[gyroscope][y]",
      "[gyroscope][z]"
    ]
  }
  mutate {
    add_field => {
      "[gyroscope][x]" => "%{[gyroscope][value][0]}"
      "[gyroscope][y]" => "%{[gyroscope][value][1]}"
      "[gyroscope][z]" => "%{[gyroscope][value][2]}"
    }
  }
  mutate {
    convert => {
      "[gyroscope][x]" => "float"
      "[gyroscope][y]" => "float"
      "[gyroscope][z]" => "float"
    }
  }
  mutate{ 
    remove_field => [
      "[linearAcceleration][x]",
      "[linearAcceleration][y]",
      "[linearAcceleration][z]"
    ]
  }
  mutate{ 
    add_field => {
      "[linearAcceleration][x]" => "%{[linearAcceleration][value][0]}"
      "[linearAcceleration][y]" => "%{[linearAcceleration][value][1]}"
      "[linearAcceleration][z]" => "%{[linearAcceleration][value][2]}"
    }
  }
  mutate{ 
    convert => {
      "[linearAcceleration][x]" => "float"
      "[linearAcceleration][y]" => "float"
      "[linearAcceleration][z]" => "float"
    }
  }
  mutate{ 
    remove_field => [
      "[accelerometer][x]",
      "[accelerometer][y]",
      "[accelerometer][z]"
    ]
  }
  mutate{ 
    add_field => {
      "[accelerometer][x]" => "%{[accelerometer][value][0]}"
      "[accelerometer][y]" => "%{[accelerometer][value][1]}"
      "[accelerometer][z]" => "%{[accelerometer][value][2]}"
    }
  }
  mutate{ 
    convert => {
      "[accelerometer][x]" => "float"
      "[accelerometer][y]" => "float"
      "[accelerometer][z]" => "float"
    }
  }
  mutate{ 
    remove_field => [
      "[magneticField][x]",
      "[magneticField][y]",
      "[magneticField][z]"
    ]
  }
  mutate{ 
    add_field => {
      "[magneticField][x]" => "%{[magneticField][value][0]}"
      "[magneticField][y]" => "%{[magneticField][value][1]}"
      "[magneticField][z]" => "%{[magneticField][value][2]}"
    }
  }
  mutate{ 
    convert => {
      "[magneticField][x]" => "float"
      "[magneticField][y]" => "float"
      "[magneticField][z]" => "float"
    }
  }
  mutate{ 
    remove_field => [
      "[gravity][x]",
      "[gravity][y]",
      "[gravity][z]"
    ]
  }
  mutate{ 
    add_field => {
      "[gravity][x]" => "%{[gravity][value][0]}"
      "[gravity][y]" => "%{[gravity][value][1]}"
      "[gravity][z]" => "%{[gravity][value][2]}"
    }
  }
  mutate{ 
    convert => {
      "[gravity][x]" => "float"
      "[gravity][y]" => "float"
      "[gravity][z]" => "float"
    }
  }
  mutate{ 
    remove_field => [
      "[rotationVector][x]",
      "[rotationVector][y]",
      "[rotationVector][z]"
    ]
  }
  mutate{ 
    add_field => {
      "[rotationVector][x]" => "%{[rotationVector][value][0]}"
      "[rotationVector][y]" => "%{[rotationVector][value][1]}"
      "[rotationVector][z]" => "%{[rotationVector][value][2]}"
    }
  }
  mutate{ 
    convert => {
      "[rotationVector][x]" => "float"
      "[rotationVector][y]" => "float"
      "[rotationVector][z]" => "float"
    }
  }
}

filter {
  mutate {
    remove_tag => [ "arrays_to_xyz" ]
  }
}

filter {
  mutate {
    add_tag => [ "arrays_to_xyz" ]
  }
}

# This output block will send all events of type "rsyslog" to Elasticsearch at the configured
# host and port into daily indices of the pattern, "rsyslog-YYYY.MM.DD"
#

output {
  #stdout {}

  elasticsearch {
    id => "sensorstream"
    hosts => [ "http://elasticsearch:9200" ]
    index => "sensor-stream-%{+YYYY.MM}"
  }
}
